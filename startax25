#!/bin/bash
PATH=/usr/local/sbin:/usr/local/bin:/bin:/usr/bin:/usr/sbin:/etc/ax25:/usr/local/ax25
#eigene Station CALL-1
# nur eine /32 bekommt das eigene System
# eigener Rechner connectet immer zu HFT-0

# in /etc/ax25/axports steht dann die (unkommentierte) Zeile:
#ax0     CALL-1        19200    255     5       144.900 MHz (1200  bps)

# nach Connect zu DB0hft mit ax25 kann ich mit getip eine MY_IP bekommen

MY_CALL=DJ1AN-1 # -10 wird ggf. ergänzt
MY_IP=44.149.140.52
SER_KISS=/dev/ttyUSB0

case "$1" in
  start)
    kissattach $SER_KISS ax0 > /tmp/ax25-config.tmp
    
    #echo 1 > /proc/sys/net/ax25/ax0/ip_default_mode
    
    # experimentelle Parameter, womöglich nur für direkten Link geeignet
    #echo 7 >/proc/sys/net/ax25/ax0/standard_window_size
    #echo 100 >/proc/sys/net/ax25/ax0/t1_timeout
    #echo 30 >/proc/sys/net/ax25/ax0/t2_timeout
    #echo 30000 >/proc/sys/net/ax25/ax0/t3_timeout
    #echo 30 >/proc/sys/net/ax25/ax0/maximum_retry_count
    
    # https://thomask.sdf.org/blog/2017/08/06/improving-arp-performance-on-slow-ax-25-links.html
    #echo 5000 > /proc/sys/net/ipv4/neigh/ax0/retrans_time_ms
    #echo 1200000 > /proc/sys/net/ipv4/neigh/ax0/base_reachable_time_ms
    
    axparms -route add ax0 db0hft -ipmode vc
    axparms --setcall ax0 ${MY_CALL}
    ip address add ${MY_IP}/32 dev ax0
    
    arp -H ax25 -i ax0 -s 44.149.140.50 db0hft
    
    ip route add 44.149.140.50 dev ax0
    ip route add 44.130.0.0/16 via 44.149.140.50
    ip route add 44.148.0.0/15 via 44.149.140.50
    ip route add 44.224.0.0/15 via 44.149.140.50

    #Blockt ausgehenden Multicast auf dem AX Device, Chromium Knebel
    iptables -A OUTPUT -s ${MY_IP}/32 -d 224.0.0.0/4 -j REJECT

  ;;

  stop)
    killall -TERM kissattach
    arp -d 44.149.140.50
	iptables -D OUTPUT -s ${MY_IP}/32 -d 224.0.0.0/4 -j REJECT
    exit 0
  ;;

  *)
    echo "Usage: startax {start|stop}"
    exit 0
  ;;
esac
exit 0
